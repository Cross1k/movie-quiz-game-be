import express from "express";
import pino from "pino-http";
import cors from "cors";
import http from "http";

import { nanoid } from "nanoid";
import { v2 as cloudinary } from "cloudinary";

import { Server } from "socket.io";

import { getEnvVar } from "./utils/getEnvVar.js";
import { CLOUDINARY } from "./utils/cloudinary.js";

const PORT = Number(getEnvVar("PORT", "3000"));

cloudinary.config({
  secure: true,
  cloud_name: getEnvVar(CLOUDINARY.CLOUDNAME),
  api_key: getEnvVar(CLOUDINARY.CLOUDAPIKEY),
  api_secret: getEnvVar(CLOUDINARY.CLOUDAPISECRET),
});

const gamesList = {};
const moviesList = {};

function determineWinner(room) {
  if (
    !gamesList[room] ||
    !gamesList[room].players ||
    gamesList[room].players.length === 0
  ) {
    console.log(`–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–µ—Å—Å–∏–∏ ${room}`);
    return null;
  }

  // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞ –∏–≥—Ä–æ–∫–æ–≤
  const players = [...gamesList[room].players];

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—á–µ—Ç–∞
  players.sort((a, b) => b.score - a.score);

  // –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ - –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
  const winner = players[0];

  console.log(
    `–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –≤ –∏–≥—Ä–µ ${room}: ${winner.name} —Å–æ —Å—á–µ—Ç–æ–º ${winner.score}`
  );

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∏—á—å—é
  const tiedPlayers = players.filter((player) => player.score === winner.score);

  if (tiedPlayers.length > 1) {
    console.log(
      `–í –∏–≥—Ä–µ ${room} –Ω–∏—á—å—è –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏: ${tiedPlayers
        .map((p) => p.name)
        .join(", ")}`
    );
    return { winner, isTie: true, tiedPlayers };
  }

  return { winner, isTie: false };
}

export const setupServer = () => {
  const app = express();
  const server = http.createServer(app);
  app.use(cors());
  
  const io = new Server(server, {
     cors: { origin: "https://movie-quiz-psi.vercel.app" }, // use it on prod
   // cors: { origin: "*" },
  });



  app.use(
    pino({
      transport: {
        target: "pino-pretty",
      },
    })
  );

  app.get("/", (req, res) => {
    res.json({
      message: "Hello world!",
    });
  });

  io.on("connection", (socket) => {
    console.log("–ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:", socket.id, socket.handshake.time);

    socket.on("create_session", (room) => {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
      if (Object.keys(gamesList).find((id) => id === room)) {
        console.log(
          `–°–µ—Å—Å–∏—è —Å ID ${Object.keys(gamesList).find(
            (id) => id === room
          )} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`
        );
        return;
      }

      gamesList[room] = {
        host: null, // –ü–æ–∫–∞ –Ω–µ—Ç —Ö–æ—Å—Ç–∞
        players: [], // –ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤
        gamePage: null, // –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–≥—Ä–µ
      };

      console.log("–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:", room);
    });

    socket.on("join_room", (room, playerId, _id, playerName) => {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
      if (!gamesList[room]) {
        console.log(`–°–µ—Å—Å–∏—è ${room} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        return;
      }

      if (_id === null) {
        _id = nanoid();
      }

      if (gamesList[room].players.find((player) => player._id === _id)) {
        if (
          gamesList[room].players.find((player) => player.socketId === playerId)
        ) {
          console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${playerId} —É–∂–µ –≤ —Å–µ—Å—Å–∏–∏ ${room}`);
          return;
        }
      } else {
        gamesList[room].players.find((player) => player._id === _id).socketId =
          playerId;
      }

      if (gamesList[room].players.length >= 3) {
        console.log(`–°–µ—Å—Å–∏—è ${room} —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –ú–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤: 3`);
        return;
      }

      gamesList[room].players.push({
        _id: _id,
        socketId: playerId,
        name: playerName,
        score: 0,
      });

      socket.join(room);
      console.log(`–ò–≥—Ä–æ–∫ ${playerId} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —Å–µ—Å—Å–∏–∏ ${room}:`);

      if (gamesList[room].host && gamesList[room].players.length === 3) {
        io.to(room).emit("game_page", room);
        console.log(`–ö–æ–º–Ω–∞—Ç–∞ ${room} –ø–æ–ª—É—á–∏–ª–∞ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥.`);
      } else {
        console.log(`–ö–æ–º–Ω–∞—Ç–∞ ${room} –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –∏–≥—Ä–µ.`);
      }
    });

    socket.on("host_page_id", (room, id, _id) => {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
      if (!gamesList[room]) {
        console.log(`–°–µ—Å—Å–∏—è ${room} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
        return;
      }

      if (_id === null) {
        _id = nanoid();
      }
      const session = gamesList[room];

      // –ï—Å–ª–∏ —Ö–æ—Å—Ç–∞ –≤ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ
      if (!session.host) {
        session.host = { id: _id, socketId: id };
        socket.join(room);
        console.log(`–î–æ–±–∞–≤–ª–µ–Ω —Ö–æ—Å—Ç –≤ —Å–µ—Å—Å–∏—é ${room}:`, session.host);
        return;
      }

      // –ï—Å–ª–∏ —Ö–æ—Å—Ç —É–∂–µ –µ—Å—Ç—å, –Ω–æ ID —Å–æ–≤–ø–∞–¥–∞—é—Ç, –∞ socketId –∏–∑–º–µ–Ω–∏–ª—Å—è ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º socketId
      if (session.host.id === _id) {
        if (session.host.socketId !== id) {
          session.host.socketId = id;
          console.log(
            `–û–±–Ω–æ–≤–ª–µ–Ω socketId —Ö–æ—Å—Ç–∞ –≤ —Å–µ—Å—Å–∏–∏ ${room}:`,
            session.host
          );
        } else {
          console.log(
            `–•–æ—Å—Ç –≤ —Å–µ—Å—Å–∏–∏ ${room} —É–∂–µ –∞–∫—Ç—É–∞–ª–µ–Ω, –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.`
          );
        }
        return;
      }

      // –ï—Å–ª–∏ –≤ —Å–µ—Å—Å–∏–∏ —É–∂–µ –µ—Å—Ç—å —Ö–æ—Å—Ç —Å –¥—Ä—É–≥–∏–º hostId ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
      console.log(
        `–í —Å–µ—Å—Å–∏–∏ ${room} —É–∂–µ –µ—Å—Ç—å –¥—Ä—É–≥–æ–π —Ö–æ—Å—Ç, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.`
      );
    });

    socket.on("game_page_id", (room, gameId, id) => {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
      if (!gamesList[room]) {
        console.log(`–°–µ—Å—Å–∏—è ${room} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
        return;
      }

      if (id === null) id = nanoid();

      if (gamesList[room].gamePage === null) {
        gamesList[room].gamePage = {
          socketId: gameId,
          _id: id,
        };

        socket.join(room);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º io.to –≤–º–µ—Å—Ç–æ socket.to –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–æ–∫–µ—Ç—É
        io.to(gamesList[room].host.socketId).emit("send_game_page_id", gameId);

        io.emit("game_page_id_answer", id);
        console.log(
          gameId,
          "ID –∏–≥—Ä–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ö–æ—Å—Ç—É:",
          gamesList[room].host.socketId
        );
      } else if (gamesList[room].gamePage._id === id) {
        console.log(`ID –∏–≥—Ä–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ö–æ—Å—Ç—É: ${gameId}`);
      } else {
        console.log(
          `ID –∏–≥—Ä–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ö–æ—Å—Ç—É: ${gamesList[room].gamePage}, –Ω–æ–≤—ã–π ID: ${gameId}`
        );
      }
    });

    /* - THEMES, MOVIES - */

    socket.on("get_themes", async (room) => {
      if (!moviesList[room]) {
        moviesList[room] = { themes: {} };
      }

      try {
        console.log("üì° –ó–∞–ø—Ä–æ—Å —Ç–µ–º –∏ —Ñ–∏–ª—å–º–æ–≤...");

        const themesResult = await cloudinary.api.sub_folders(
          "movie-quiz/themes"
        );

        for (const theme of themesResult.folders) {
          if (!moviesList[room].themes[theme.name]) {
            moviesList[room].themes[theme.name] = { movies: [] };

            const moviesResult = await cloudinary.api.sub_folders(
              `movie-quiz/themes/${theme.name}`
            );

            moviesList[room].themes[theme.name].movies =
              moviesResult.folders.map((movie, index) => ({
                index,
                name: movie.name,
                guessed: false,
                whoGuessed: null,
              }));
          }
        }

        io.emit("themes_list", moviesList[room].themes);
        console.log("üì° –¢–µ–º—ã –∏ —Ñ–∏–ª—å–º—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:", moviesList[room].themes);
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–µ–º –∏ —Ñ–∏–ª—å–º–æ–≤:", error);
      }
    });

    socket.on("select_movie", async (themeName, movieName, gameId) => {
      try {
        const result = await cloudinary.api.resources_by_asset_folder(
          `movie-quiz/themes/${themeName}/${movieName}`
        );

        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const framesList = () => {
          return result.resources.map((frame) => frame.url);
        };

        console.log(`üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${framesList().length} –∫–∞–¥—Ä–æ–≤ –∫ ${gameId}`);
        io.to(gameId).emit("open_frame", framesList());
      } catch (error) {
        console.log("error", error.message);
      }
    });

    socket.on("change_frame", (gameId) => {
      io.to(gameId).emit("change_frame");
      console.log("FRAME, sended to", gameId);
    });

    socket.on(
      "show_logo",
      (gameId, room, playerName, movieTheme, movieName) => {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        if (
          !moviesList[room] ||
          !moviesList[room].themes ||
          !moviesList[room].themes[movieTheme]
        ) {
          console.log(`–¢–µ–º–∞ ${movieTheme} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏ ${room}`);
          return;
        }

        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ñ–∏–ª—å–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!moviesList[room].themes[movieTheme].movies[movieName]) {
          console.log(`–§–∏–ª—å–º ${movieName} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–º–µ ${movieTheme}`);
          return;
        }

        moviesList[room].themes[movieTheme].movies[movieName].guessed = true;
        moviesList[room].themes[movieTheme].movies[movieName].whoGuessed =
          playerName;

        socket.to(gameId).emit("show_logo", moviesList[room]);
        console.log("LOGO, sended to", gameId);
      }
    );

    /* - ANSWERS - */

    socket.on("give_answer", (room, playerName) => {
      console.log(`–û—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${playerName} –≤ —Å–µ—Å—Å–∏–∏ ${room}`);
      socket.broadcast.to(room).emit("broadcast_answer", playerName);
    });

    socket.on("bad_answer", (room) => {
      console.log(`–ù–µ –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Å–µ—Å—Å–∏–∏ ${room}`);
      socket.to(room).emit("broadcast_bad_answer");
    });

    socket.on("send_points", (pts, room, playerName, gameId) => {
      if (!gamesList[room]) {
        console.log(`–°–µ—Å—Å–∏—è ${room} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
        return;
      }

      const playerIndex = gamesList[room].players.findIndex(
        (player) => player.name === playerName
      );

      if (playerIndex === -1) {
        console.log(`–ò–≥—Ä–æ–∫ ${playerName} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏ ${room}.`);
        return;
      }

      gamesList[room].players[playerIndex].score += pts; // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª
      console.log(
        `–ò–≥—Ä–æ–∫ ${playerName} –ø–æ–ª—É—á–∏–ª ${pts} –±–∞–ª–ª! –¢–µ–∫—É—â–∏–µ –æ—á–∫–∏: ${gamesList[room].players[playerIndex].score}`
      );

      io.to(gameId).emit("all_points", gamesList[room].players);
      io.to(gamesList[room].players[playerIndex].socketId).emit(
        "your_points",
        gamesList[room].players[playerIndex].score
      );
    });

    socket.on("end_game", (room) => {
      const result = determineWinner(room);

      if (result) {
        if (result.isTie) {
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∏—á—å–µ–π
          io.to(room).emit("game_ended_tie", {
            tiedPlayers: result.tiedPlayers.map((p) => ({
              name: p.name,
              score: p.score,
            })),
            score: result.winner.score,
          });
          console.log(`–ò–≥—Ä–∞ ${room} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –Ω–∏—á—å–µ–π`);
        } else {
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–±–µ–¥—ã
          io.to(room).emit("game_ended", {
            winner: result.winner.name,
            score: result.winner.score,
          });
          console.log(
            `–ò–≥—Ä–∞ ${room} –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å ${result.winner.name} —Å–æ —Å—á–µ—Ç–æ–º ${result.winner.score}`
          );
        }

        // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
        delete gamesList[room];
        delete moviesList[room];
      } else {
        console.log(`–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ –∏–≥—Ä–µ ${room}`);
      }
    });

    socket.on("disconnect", () => {
      console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è:", socket.id);
    });
  });

  app.get("*", (req, res, next) => {
    res.status(404).json({
      message: "Not found",
    });
  });

  app.use((err, req, res, next) => {
    res.status(500).json({
      message: "Something went wrong",
      error: err.message,
    });
  });

  server.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
  });
};
